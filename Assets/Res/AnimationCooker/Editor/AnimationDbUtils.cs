// This is a static utility class that contains functions for creating
// and saving a C# file that contains information about animated clips.
//------------------------------------------------------------------------//

#if UNITY_EDITOR

using System.Collections.Generic;
using System.IO;

public static class AnimationDbUtils
{
	private static HashSet<string> m_keywords = new HashSet<string> {
		"abstract", "as", "base", "bool", "break", "byte", "case", "catch", "char", "checked",
		"class", "const", "continue", "decimal", "default", "delegate", "do", "double", "else",
		"enum", "event", "explicit", "extern", "false", "finally", "fixed", "float", "for",
		"foreach", "goto", "if", "implicit", "in", "int", "interface", "internal", "is", "lock",
		"long", "namespace", "new", "null", "object", "operator", "out", "override", "params",
		"private", "protected", "public", "readonly", "ref", "return", "sbyte", "sealed",
		"short", "sizeof", "stackalloc", "static", "string", "struct", "switch", "this", "throw",
		"true", "try", "typeof", "uint", "ulong", "unchecked", "unsafe", "ushort", "using",
		"virtual", "void", "volatile", "while"
	};

	// saves the data to disk as a C# file.
	// pathAndName should be something like "Assets/Output/AnimDb.cs"
	// enableWriteEnums --> you can set this to false if you don't want to use the enums.
	public static void SaveDatabase(AnimationDatabase db, string folderPath, string name, bool enableWriteEnums = true)
    {   
		// ensure that the output directory exists
		Directory.CreateDirectory(folderPath);

		// write the script file
		string pathAndName = Path.Combine(folderPath, "AnimDb.cs");
		string text = AnimationDbUtils.MakeDatabaseText(db, enableWriteEnums);
		File.WriteAllText(pathAndName, text);
	}

	// returns the full text of the C# file.
	public static string MakeDatabaseText(AnimationDatabase db, bool enableWriteEnums)
	{
		return $@"
		// This class was auto-generated by AnimationCooker
		using System.Collections.Generic;
		public static class AnimDb
		{{
			public static void Populate(DoubleDictionary<string, AnimDbEntry> dict)
			{{
				{MakeEntriesText(db)}
			}}
			{MakeModelEnumText(db, enableWriteEnums)}
			{MakeClipEnumsText(db, enableWriteEnums)}
		}}";
    }

	static string MakeModelEnumText(AnimationDatabase db, bool enableWriteEnums)
    {
		if (!enableWriteEnums) { return ""; }
		// example --> public enum Model { Horse, Farmer, Chicken, Goat }
		string text = "public enum Model { ";
		int modelIdx = 0;
		foreach (var model in db) {
			text += MakeStringEnumCompatible(model.Key);
			modelIdx++;
			if (modelIdx < db.GetModelCount()) { text += ", "; } // add comma for every item except for the last one
		}
		text += " }";
		return text;
	}

	// given a string, attempts to make the string compatible with an enum
	static string MakeStringEnumCompatible(string text)
    {
		if (text.Length <= 0) { return "INVALID_ENUM_NAME"; }
		string ret = "";

		// first char must be a letter or an underscore
		if (char.IsLetter(text[0]) || (text[0] == '_')) { ret += text[0]; }

		// strip out anything that's not a digit or underscore
		for (int i = 1; i < text.Length; ++i) {
			if (char.IsLetterOrDigit(text[i]) || (text[i] == '_')) { ret += text[i]; }
		}
		if (ret.Length <= 0) { return "INVALID_ENUM_NAME"; }

		// all the keywords are lowercase, so if we just change the first letter to uppercase,
		// then there will be no conflict
		if (m_keywords.Contains(ret)) { ret = char.ToUpper(ret[0]) + ret.Substring(1); }
		
		return ret;
	}

	static string MakeClipEnumsText(AnimationDatabase db, bool enableWriteEnums)
	{
		if (!enableWriteEnums) { return ""; }
		// example --> public enum Horse { Walk, Idle, Run }
		string text = "";
		int modelIdx = 0;
		foreach (var model in db) {
			if (modelIdx != 0) { text += "\r\n			"; } // do this for every line except for the first one
			text += "public enum " + MakeStringEnumCompatible(model.Key) + " { ";
			int clipIdx = 0;
			foreach (var clip in model.Value) {
				text += MakeStringEnumCompatible(clip.Key);
				clipIdx++;
				if (clipIdx < model.Value.Count) { text += ", "; } // do this for every item except for the last one
			}
			text += "}";
			modelIdx++;
		}
		return text;
	}

	static string MakeEntriesText(AnimationDatabase db)
    {
        string text = "";
		int lineIdx = 0;
        foreach (var model in db) {
			foreach (var clip in model.Value) {
				// example -->   dict["Horse", "Walk"] = new AnimDbEntry { beginFrame = 0, endFrame = 7, index = 0, interval = 0.2f, name = "Walk" };
				if (lineIdx != 0) { text += "\r\n				"; } // do this for every line except for the first one
				// removing escape characters in the key strings will prevent errors
				string modelKey = model.Key.Replace(@"\", "");
				string clipKey = clip.Key.Replace(@"\", "");
				text += "dict[\"" + model.Key.Replace(@"\", "") + "\", \"" + clipKey + "\"] = new AnimDbEntry { beginFrame = " + clip.Value.beginFrame + ", endFrame = " + clip.Value.endFrame + ", interval = " + clip.Value.interval + "f, modelName = \"" + modelKey + "\", clipName = \"" + clipKey + "\", modelIndex = " + clip.Value.modelIndex + ", clipIndex = " + clip.Value.clipIndex + " };";
				lineIdx++;
			}
		}
        return text;
    }
}

#endif